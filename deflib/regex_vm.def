include: input_buffer.def

#### ---------------------------------------------
# Regular Expression Matching: the Virtual Machine Approach
# http://swtch.com/~rsc/regexp/regexp2.html
subcode:: _autoload
    $enum Match, Char, Split, Jmp, AnyChar, Range, NotChar, LtChar, GtChar, Class
    $struct(VMInst) int opcode, int c, int x, int y
    # VM thread list
    #     state, label, state, label, ...
    $struct(regex_vm) n, pn_clist, pn_nlist, struct VMInst * nfa
    $list regex_vm_init, regex_vm_finish
    $list regex_vm_match

fncode: regex_vm_init(struct VMInst * nfa, n_size)
    $local struct regex_vm * vm
    $allocate vm
    vm->n=n_size
    vm->nfa=nfa
    $allocate(n_size*2+1) vm->pn_clist
    $allocate(n_size*2+1) vm->pn_nlist
    return vm

fncode: regex_vm_finish(struct regex_vm * vm)
    free(vm->pn_clist)
    free(vm->pn_nlist)

# ----------------------------------------------
subcode: init_vm_thread_list
    clist[0]=0
    clist[1]=0
    tn_clist=2
    tn_nlist=0

subcode: swap_vm_thread_list
    $local int * tlist;
    tlist=nlist; nlist=clist; clist=tlist;
    tn_clist=tn_nlist
    tn_nlist=0

subcode: add_vm_thread(list, thread)
    tb_flag=1
    $for j=0:tn_$(list):2
        $if $(list)[j]==$(thread)
            tb_flag=0
	    break
    $if tb_flag
	$(list)[tn_$(list)]=$(thread)
	tn_$(list)++
	$(list)[tn_$(list)]=tn_label
	tn_$(list)++

# ----
subcode: input_start(b)
    $(b)->n_start=$(b)->n_pos
subcode: input_fetch_c(b)
    c=input_get_char($(b))
subcode: input_back_pos(b, len)
    $(b)->n_pos=$(b)->n_start+$(len)

fncode: regex_vm_match(struct regex_vm * vm, struct input_buffer * b)
    $return_type int
    $local int * clist, int * nlist
    $local struct VMInst * nfa
    clist=vm->pn_clist
    nlist=vm->pn_nlist
    nfa=vm->nfa

    n_last_match_len=0
    n_last_match_id=0

    $call init_vm_thread_list
    $while tn_clist>0
	$call regex_vm_match_prescan
	$call input_fetch_c, b
	$if c==EOF
	    $if n_last_match_len>0
		goto return_match
	    $else
		return EOF
	$elif c=='\n' 
	    $global int prog_line=0
	    prog_line++

	# -- Lock-Step running of all threads --
	$for i=0:tn_clist:2
	    $local struct VMInst* pInst
            pInst=nfa+clist[i]
	    tn_label=clist[i+1]
	    $if tn_label>=0
		$call regex_vm_opcode
	$call swap_vm_thread_list
    return_match:
    $if n_last_match_len>0
	$call input_back_pos, b, n_last_match_len
    return n_last_match_id

subcode: regex_vm_match_prescan
    tn_match=1
    $for i=0:tn_clist:2
	$if nfa[clist[i]].opcode!=Match
	    tn_match=0
    $if tn_match
	return nfa[clist[0]].c

subcode: regex_vm_match_nongreedy
    $if tn_label>0
	$for j=i+3:tn_clist:2
	    $if clist[j]==tn_label
		clist[j]=-1

subcode: regex_vm_match_checksize
    tn_len=b->n_pos-b->n_start-1
    $if tn_len>n_last_match_len
	n_last_match_len=tn_len
	n_last_match_id=pInst->c

subcode: regex_vm_opcode
    $local int c
    $if pInst->opcode==Match
	$call regex_vm_match_nongreedy
	$call regex_vm_match_checksize
    $elif pInst->opcode==Jmp
	$call add_vm_thread, clist, pInst->x
    $elif pInst->opcode==Split
	$if pInst->c && !tn_label
	    tn_label=clist[i]
	$call add_vm_thread, clist, pInst->x
	$call add_vm_thread, clist, pInst->y
    $else
	$if pInst->opcode==Char
	    $if c != pInst->c
		continue
	$elif pInst->opcode==NotChar
	    $if c == pInst->c
		continue
	$elif pInst->opcode==LtChar
	    $if c >= pInst->c
		continue
	$elif pInst->opcode==GtChar
	    $if c <= pInst->c
		continue
	$elif pInst->opcode==Range
	    $if c<pInst->x || c>pInst->y
		continue
	$elif pInst->opcode==Class
	    $if pInst->c == 's'
		$if c!=' ' && c!='\t'
		    continue
	    $elif pInst->c == 'S'
		$if c==' ' && c=='\t'
		    continue
	    $elif pInst->c=='d'
		$if c<'0' || c>'9'
		    continue
	    $elif pInst->c=='D'
		$if c>='0' && c<='9'
		    continue
	    $elif pInst->c=='w'
		$if c!='_' && (c<'0' || c>'9') && (c<'A' || c>'Z') && (c<'a' || c>'z') 
		    continue
	    $elif pInst->c=='W'
		$if c=='_' || (c>='0' && c<='9') || (c>='A' && c<='Z') || (c>='a' && c<='z') 
		    continue
	$call add_vm_thread, nlist, clist[i]+1


