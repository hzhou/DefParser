include: macro_regex/first_set.def

subcode:: _autoload
    $global $flag_debug

subcode: parse_grammar
    my @fnlist
    &call topdown_loop, name, $top_symbol
	$call init_debug
	my $rulelist=$rules{$name}
	$call parse_function_start
	$indent++
	$call do_print, "\$call \@debug_parse_start, $name"
	$call do_rule_alt, $rulelist

	$call do_print_ln

subcode: init_debug
    $if $debug eq "ON" or $debug eq $name
	$flag_debug=1
    $else
	$flag_debug=0

# --------------
subcode: do_rule_alt(rulelist)
    &call do_rule_token_group
	$if @$(rulelist)==1
	    $call do_rule_finish, $(rulelist)->[0]
	$else
	    $call check_left_factors, $(rulelist)
	    my @i_list
	    $for $i=0:@$(rulelist)
		push @i_list, $i
	    do_rule_pre_factor(0, $(rulelist), \@i_list, $indent)

subcode: do_rule_optional(r)
    my $r=$(r)
    my ($lookahead, $depth)=get_look_ahead($r)
    
    $if $r->{type} eq "*" or $r->{type} eq "+"
	$call do_print, "\$while 1"
	$indent++
	$call do_print, "\$call look_ahead, $depth"
	$call do_print, "\$if !($lookahead)"
	$call do_print, "    break"
	$r=$r->{value}
	$r->{name}=$name
	do_rule($r, $indent)
	$indent--
    $else
	$if $r->{type} eq "?"
	    $r=$r->{value}
	$call do_print, "\$call look_ahead, $depth"
	$call do_print, "\$if $lookahead"
	$indent++
	$r->{name}=$name
	do_rule($r, $indent)
	$indent--

# Detect: (exp ',')* exp
subcode: check_group_ambiguity(set1, set2)
    my %temp_hash
    $foreach $s in @$(set1)
	$if $s ne "EMPTY"
	    $temp_hash{$s}=1
    my @ambibuity
    $foreach $s in @$(set2)
	$if $temp_hash{$s}
	    push @ambibuity, $s
    $if @ambibuity
	print "Ambiguity at pos $i: ", join(", ", @ambibuity), "\n"
	print "    ",print_rule($rule), "\n"
	print "    first set: ", join(", ", @$(set1)), "\n"
	print "    second set: ", join(", ", @$(set2)), "\n"
	die

# ------------------------------------------------
subcode:: _autoload
    $sub do_rule($rule, $indent)
	$call get_rule_name, $rule
	my $error
	my $type=$rule->{type}
	$if !$name
	    print "do_rule($type-noname): ", print_rule($rule), "\n"
	$if $type eq "keyword"
	    $call do_print, "\$call match_keyword, $rule->{value}"
	$elif $type eq "term"
	    $call do_print, "\$call match_term, $rule->{value}"
	$elif $type eq "nonterm"
	    $call do_print, "parse_$rule->{value}()"
	    push @topdown_list, $rule->{value}
	$elif $type eq "group"
	    my $tlist=$rule->{value}
	    $for $i=0:@$tlist
		my $first_set=get_first($tlist->[$i])
		$if $first_set->[0] eq "EMPTY" or $tlist->[$i]->{type} eq '+'
		    my $second_set=get_first_sublist($tlist, $i+1)
		    $call check_group_ambiguity, $first_set, $second_set
		    &call do_rule_token_group
			$call do_rule_optional, $tlist->[$i]
			$call do_print, "\$call on_parse_finish, group"
		$else
		    $tlist->[$i]->{name}=$name
		    do_rule($tlist->[$i], $indent)
	$elif $type eq "*" or $type eq "?" or $type eq "+"
	    $call do_rule_optional, $rule
	$elif $type eq "empty"
	    print "Error: do_rule(empty)!\n"
	    die
	$elif $type eq "alt"
	    my $rulelist=$rule->{value}
	    my $i=1
	    $foreach $r in @$rulelist
		my $r_name=$name."_$i"
		$r->{name}=$r_name
		$call add_rule_name, $r_name
		$i++
	    $call do_rule_alt, $rulelist
	$else
	    $error="Rule type [$type] not recognized."

	$if $error
	    print "    "x$indent
	    print "do_rule errro: $error\n"
	    print "    "x$indent
	    print "    in rule: ", print_rule($rule), "\n"

# --------------------------------
subcode:: _autoload
    $sub do_rule_pre_factor($k, $rulelist, $i_list, $start_indent)
	$call push_out
	my $la_depth=0

	my $num_total=@$i_list
	my $num_remain=$num_total
	$call get_alt_set
	my $indent=$start_indent
	$for $i=0:$num_total
	    my $r=$alt_set[$i]
	    $call get_rule_name, $r
	    $if !$name
		print "do_rule_pre_factor-noname: ", print_rule($r), "\n"
	    $call do_rule_pre_factor_i
	&call pop_out
	    $if $la_depth>0
		$call do_print, "\$call look_ahead, $la_depth"

subcode: do_rule_pre_factor_i
    $if $num_remain==1
	$call do_print, "\$else"
	$indent++
	$call do_rule_finish, $r
	$indent--
	$num_remain--
    $else
	$call get_rule_list, $r, $rlist
	my $factor=$rlist->[0]->{factor}
	$if !defined $factor
	    # ---- Unique look ahead, need check ambiguity --
	    my ($lookahead, $depth)=get_look_ahead($r)
	    $if $depth>$la_depth
		$la_depth=$depth
	    $call do_print, "\$case $lookahead"
	    $indent++
	    $call do_rule_finish, $r
	    $indent--
	    $num_remain--
	$elif $factor eq "1"
	    # ---- Should not happen -------------------
	    # skip
	$else
	    # ---- Left factoring -----------------------
	    my @factors=split /-/, $factor
	    $if $num_remain==@factors
		$if $num_remain<$num_total
		    $call do_print, "\$else"
		    $indent++
	    $else
		my ($lookahead, $depth)=get_look_ahead($r)
		$if $depth>$la_depth
		    $la_depth=$depth
		$call do_print, "\$case $lookahead"
		$indent++
	    $call do_rule_factor
	    # use original rulelist to maintain alt indenx name
	    do_rule_pre_factor($k+$i, $rulelist, \@factors, $indent)
	    $indent--

subcode: do_rule_factor
    my $i=0
    $while $i<@$rlist and $rlist->[$i]->{factor} eq $factor
	$rlist->[$i]->{name}=$name
	do_rule($rlist->[$i], $indent)
	$i++

subcode: do_rule_finish(rule)
    do_rule($(rule), $indent)
    $call get_rule_name, $(rule)
    $if !$name
	$name="group"
    $call do_print, "\$call on_parse_finish, $name"
    $call do_print, "\$call \@debug_parse_finish, $name"

# -----
subcode: get_alt_set
    my @alt_set
    my $empty_alt
    my $empty_alt_name
    $foreach $i in @$i_list
	my $r=$rulelist->[$i]
	$call get_rule_name, $r
	$if !$name
	    print "get_alt_set - $i - noname: ", print_rule($r), "\n"
	$if $k==0
	    $r->{index}=$i
	    push @alt_set, $r
	$elif $r->{type} ne "group" && $k>=1
	    $call set_empty_alt
	$else
	    # $r is group rule
	    my $tlist=$r->{value}
	    $if $k>=@$tlist
		$call set_empty_alt
	    $else
		my @t
		$for $j=$k:@$tlist
		    push @t, $tlist->[$j]
		push @alt_set, {type=>"group", value=>\@t, index=>$i, name=>$name}
    $if $empty_alt
	push @alt_set, {type=>"empty", index=>$empty_alt, name=>$empty_alt_name}

subcode: set_empty_alt
    $if defined $empty_alt
	die "multiple empty cases\n"
    $empty_alt=$i
    $empty_alt_name=$name

# -- Left Factoring --------------------------------
subcode:: _autoload
    $sub cmp_rule($a, $b)
	$if $a->{type} ne $b->{type}
	    return 1
	$if $a->{type} =~/^(keyword|term|nonterm)/
	    return $a->{value} ne $b->{value}
	$elif $a->{type} eq "alt" or $a->{type} eq "group"
	    my $alist=$a->{value}
	    my $blist=$b->{value}
	    $if @$alist != @$blist
		return 1
	    $for $i=0:@$alist
		$if cmp_rule($alist->[$i], $blist->[$i])
		    return 1
	    return 0
	$else
	    return cmp_rule($a->{value}, $b->{value})

subcode: check_left_factors(rulelist)
    $for $i=0:@$(rulelist)
	$call get_rule_list, $(rulelist)->[$i], $list_i
	$for $j=$i+1:@$(rulelist)
	    $call get_rule_list, $(rulelist)->[$j], $list_j
	    $for $k=0:@$list_i
		my $a=$list_i->[$k]
		my $b=$list_j->[$k]
		$if $a->{factor} eq "1" 
		    next
		$elif cmp_rule($a, $b)==0
		    $if !$a->{factor}
			$a->{factor}="$i"
		    $a->{factor}.="-$j"
		    $b->{factor}="1"
		$else
		    last
	# $call print_left_factors

subcode: print_left_factors
    $if $name eq "declaration"
	print "$name - $i: "
	$for $k=0:@$list_i
	    my $a=$list_i->[$k]
	    print "[$a->{factor}] "
	print "\n"


# ===============================
subcode: get_rule_list(rule, rlist)
    my $rule=$(rule)
    my $(rlist)
    $if $rule->{type} eq "group"
	$(rlist)=$rule->{value}
    $else
	$(rlist)=[$rule]

# ===============================================
subcode:: support_subs
    $sub get_look_ahead($r)
	my $depth=1
	$if $r->{type} =~ /[*?+]/
	    return get_look_ahead($r->{value})
	$elif $r->{type} eq "group"
	    my $tlist=$r->{value}
	    return get_look_ahead_sublist($tlist, 0)

	$call @lookahead_cache_check
	my $set=get_first($r)
	my ($lookahead, $depth)=get_look_ahead_fromset($set, $depth)
	$call @lookahead_cache_save

	return ($lookahead, $depth)

    $sub get_look_ahead_sublist($list, $i)
	$if !$list->[$i+1]
	    return get_look_ahead($list->[$i])
	my $set=get_first($list->[$i])
	$if $set->[0] ne "EMPTY"
	    return get_look_ahead($list->[$i])
	$else
	    my ($la1, $d1)=get_look_ahead($list->[$i])
	    my ($la2, $d2)=get_look_ahead_sublist($list, $i+1)
	    $if $d2>$d1
		$d1=$d2
	    return ("$la1 || $la2", $d1)

    $sub get_look_ahead_fromset($set, $base_depth)
	my $depth=$base_depth
	my @partlist
	$call lookahead_fromset
	my $lookahead=join(" || ", @partlist)
	return ($lookahead, $depth)

subcode: get_look_ahead_custom(t)
    my @tlist=split /(LA\d+[^&|\)]*)/, $(t)
    $foreach $t in @tlist
	$if $t=~/LA(\d*)\s*=\s*(.*)/
	    my ($la_depth, $terms)=($1, $2)
	    $call get_look_ahead_custom_depth
	    my @term_list=split /(,\s*)/, $terms
	    my @subset
	    $call get_look_ahead_custom_subset, term_list
	    my @la= get_look_ahead_fromset(\@subset, $la_depth)
	    $t="($la[0])"
	    $if $depth<$la[1]
		$depth=$la[1]
    my $lookahead_custom="(". join('', @tlist).")"

subcode: get_look_ahead_custom_depth
    $if $la_depth>1
	$la_depth=$base_depth+($la_depth-1)
	$if $depth<$la_depth
	    $depth=$la_depth
	$global $max_la_depth=1
	$if $max_la_depth<$depth
	    $max_la_depth=$depth

subcode: get_look_ahead_custom_subset(termlist)
    my %sub_hash
    my $segment
    $foreach $term in @$(termlist)
	$if $segment
	    $term=$segment.$term
	    undef $segment
	$if $term=~/^'(.+)'/
	    $call generate_keyword_name, $1
	    $call get_look_ahead_custom_subadd, $name
	$elif $term=~/^([A-Z]\w*)/
	    $call get_look_ahead_custom_subadd, $1
	$elif $term=~/^(\w+)/
	    my $set=get_first({"type"=>"nonterm", "value"=>$1})
	    $foreach $name in @$set
		$call get_look_ahead_custom_subadd, $name
	$elif $term=~/^'/
	    $segment=$term
	$elif $term=~/^,/
	    next
	$else
	    print "Error in custom lookahead: $term [$terms]\n"
	    die

subcode: get_look_ahead_custom_subadd(name)
    $if !$sub_hash{$(name)}
	$sub_hash{$(name)}=1
	push @subset, "$(name)"

