subcode: _autoload
    # input: $str -- BNF rule string
    # output: a hash -- root of a tree structure
    $sub parse_rule($str)
	my @char_stack
	my $n_char=0
	my $in_quote=0
	my $in_slash=0

	my @paren_stack
	my $n_atom=0
	my $n_alt=0

	$for $i=0:length($str)
	    my $c=substr($str, $i, 1)
	    $if $in_quote==0
		$if $c=~/[ '\|\(\)\*\?\+]/
		    $call concat_char
		    $if $c eq "'"
			$in_quote=1
		    $else
			$call parse_special
		$else
		    push @char_stack, $c
		    $n_char++
	    $else
		$if $in_slash
		    push @char_stack, $c
		    $in_slash=0
		$else
		    $if $c eq "\\"
			$in_slash=1
		    $elif $c eq "'"
			$call concat_quote
			$in_quote=0
		    $else
			push @char_stack, $c
			$n_char++
	$if @paren_stack
	    print "Unbalancced parentheses [$str]\n"
	    $foreach $p in @paren_stack
		print "    atom: $n_atom; alt: $n_alt\n"
	    die

	$call concat_char
	$call concat_atom
	$call concat_alt
	$call @check_parse_end
	return $char_stack[0]

subcode: concat_char
    $if $n_char>0
	my $t=join('', splice(@char_stack, @char_stack-$n_char, $n_char))
	$if $t eq "RECURSE"
	    push @char_stack, {type=>"RECURSE"}
	$elif $t=~/^[A-Z]/
	    push @char_stack, {type=>"term", value=>$t}
	$else
	    push @char_stack, {type=>"nonterm", value=>$t}
	$n_char=0
	$n_atom++

subcode: concat_quote
    $if $n_char==0
	die "Empty quote !\n"
    $else
	my $t=join('', splice(@char_stack, @char_stack-$n_char, $n_char))
	$call generate_keyword_name, $t
	push @char_stack, {type=>"keyword", value=>$name}
	$n_char=0
	$n_atom++

subcode: concat_atom
    $if $n_atom>1
	my @atoms=splice(@char_stack, @char_stack-$n_atom, $n_atom)
	push @char_stack, {type=>"group", value=>\@atoms}
	$n_atom=1

subcode: concat_alt
    $if $n_alt>0
	$if $n_atom!=1
	    die "concat_alt: n_atom != 1.\n"
	$n_alt++
	my @atoms=splice(@char_stack, @char_stack-$n_alt, $n_alt)
	push @char_stack, {type=>"alt", value=>\@atoms}
	$n_alt=0

subcode: parse_special
    $if $c eq '('
	push @paren_stack, {n_alt=>$n_alt, n_atom=>$n_atom}
	$n_alt=0
	$n_atom=0
    $elif $c eq ')'
	$call concat_atom
	$call concat_alt
	my $p=pop @paren_stack
	$n_alt=$p->{n_alt}
	$n_atom=$p->{n_atom}
	$n_atom++
    $elif $c eq '|'
	$if $n_atom==0
	    die "empty | case\n"
	$call concat_atom
	$n_atom=0
	$n_alt++
    $elif $c eq '*' or $c eq '?'
	my $p=pop @char_stack
	push @char_stack, {type=>$c, value=>$p}
    $elif $c eq '+'
	my $p=$char_stack[-1]
	push @char_stack, {type=>"*", value=>$p}

# -------------------------------------------
subcode: check_parse_end
    $if @char_stack!=1
	print "Something went wrong [$str]:\n"
	$foreach $r in @char_stack
	    print_rule($r)
	print "\n"
	die
