
# -------------------------------
subcode: load_grammar(file)
    $global %rules
    $global %macros
    $global %FIRST
    my $cur_rule
    my $cur_rule_name
    my $cur_rule_index
    my $cur_rule_level

    my $top_symbol
    &call open_r, $(file)
	$if /^\%grammar\s+(\w+)/
	    $top_symbol=$1
	$elif /^\%debug\s+(\w+)/
	    $global $debug
	    $debug=$1
	$elif /^\%skip\s+(.*)/
	    $global @skip_list
	    my @tlist=split /\s+/, $1
	    push @skip_list, @tlist
	$elif /^\%lex_action\s+(.*)/
	    $global @lex_action_list
	    my @tlist=split /\s+/, $1
	    push @lex_action_list, @tlist
	$elif /^\$(\w+):\s*(.*)/
	    my ($name, $t)=($1, $2)
	    $t=~s/\s+$//
	    $macros{$name}=$t
	$elif /^FIRST\((\w+)\):\s*(.*)/
	    my ($name, $t)=($1, $2)
	    $t=~s/\s+$//
	    $FIRST{$name}="CUSTOM:$t"
	$elif /^(\w+):\s*(.*)/
	    my ($name, $t)=($1, $2)
	    $if $name=~/^[A-Z]/
		replace_macro(\$t)
		$call add_regex, $name, $t
	    $else
		$cur_rule_name=$name
		$cur_rule_index=0
		$cur_rule_level=0
		$cur_rule=[]
		$rules{$cur_rule_name}=$cur_rule
		$if $t=~/^\%(left|right)\s*(.*)/
		    die "Error: precedence cannot be at the top\n"
		$if $t!~/^\s*$/
		    $call push_rule
	$elif /^\s+\|\s*(.*)/
	    $if !$cur_rule
		die "Misplaced rule definition\n"
	    my $t=$1
	    $call push_rule

subcode:: support_subs
    $sub replace_macro($r)
	$while $$r=~/\$\w+/
	    my $flag=0
	    my @t=split /(\$\w+)/, $$r
	    $foreach $t in @t
		$if $t=~/^\$(\w+)$/
		    $if $macros{$1}
			$t=$macros{$1}
			$flag=1
		    $else
			warn "Lex macro $1 not defined\n"
	    $if $flag==0
		last
	    $else
		$$r=join('', @t)

# -- Loading individual rule ---------------------
subcode: push_rule
    $call push_rule_getname
    $if $t=~/^\%(left|right|tripple|postfix|prefix)\s*(.*)/
	my $temp_rule_name=$cur_rule_name."_$cur_rule_level"
	$rules{$temp_rule_name}=$cur_rule

	$cur_rule_level++
	$cur_rule=[]
	$rules{$cur_rule_name}=$cur_rule

	$if $1 eq "left"
	    $t="$temp_rule_name (($2) $temp_rule_name)*"
	$elif $1 eq "right"
	    $t="$temp_rule_name (($2) RECURSE)?"
	$elif $1 eq "tripple"
	    my ($op1, $op2)=split /,\s*/, $2
	    $t="$temp_rule_name ($op1 RECURSE $op2 RECURSE)?"
	$elif $1 eq "postfix"
	    $t="$temp_rule_name $2*"
	$elif $1 eq "prefix"
	    $t="$temp_rule_name | $2 RECURSE"
	$call push_rule_direct
    $else
	$call push_rule_direct

subcode: push_rule_direct
    # $t=~s/\b$cur_rule_name\b/RECURSE/g
    my $rule=parse_rule($t, $name)
    push @$cur_rule, $rule

subcode: push_rule_getname
    my $name=$cur_rule_name
    $cur_rule_index++

    $if $t=~/^(\w+):\s*(.*)/
	$name=$1
	$t=$2
    $elif $cur_rule_index>1
	$name=$cur_rule_name."_".$cur_rule_index
	$rule_name_hash{$cur_rule_name}=$cur_rule_name."_1"
    $call add_rule_name, $name

# ---- Rule Names -----------------------------
subcode:: _autoload
    $global @rule_name_list
    $global %rule_name_hash
    $call add_rule_name, "group"
    $call add_rule_name, "number"

subcode: add_rule_name(name)
    $if !$rule_name_hash{$(name)}
	push @rule_name_list, $(name)
    $else
	print "Duplicate rule name: ". $(name). "\n"
    $rule_name_hash{$(name)}=$(name)

# ############################################
subcode: each_rule_name
    $foreach $_ in @rule_name_list
	my $name=$_
	$if $rule_name_hash{$name}
	    $name=$rule_name_hash{$name}
	BLOCK

subcode: get_rule_name(rule)
    my $name=$(rule)->{name}
    $if $rule_name_hash{$name}
	$name=$rule_name_hash{$name}

subcode: get_rule_name_concat(rule)
    $call get_rule_name, $(rule)
    $name.="_concat"
    $call add_rule_name, $name

# ---- Lex Names -----------------------------
subcode:: _autoload
    $call init_KeyName

    $sub get_keyname($key)
	$call generate_keyword_name($key)
	return $name

subcode: add_regex(name, pattern)
    $global %lex_token_rules
    $global @lex_tokens
    $if !$lex_token_rules{$(name)}
	push @lex_tokens, $(name)
	$lex_token_rules{$(name)}=$(pattern)

subcode: generate_keyword_name(k)
    $global %lex_keyword_rules
    $global @lex_keywords

    my @t
    $for $i=0:length($(k))
	my $c=substr($(k), $i, 1)
	$if $KeyName{$c}
	    push @t, $KeyName{$c}
	$elif $c=~/[0-9]/
	    push @t, $c
	$elif $c=~/[a-zA-Z]/
	    push @t, uc($c)
	$else
	    die "Missing KeyName for '$c'\n"
    my $name=join('', @t)
    $if $name=~/^\d/
	$name="_$name"
    $if $lex_keyword_rules{$name} and $lex_keyword_rules{$name} ne $(k)
	my $tid=2
	$while $lex_keyword_rules{"$name\_$tid"} and $lex_keyword_rules{"$name\_$tid"} ne $(k)
	    $tid++
	$name="$name\_$tid"

    $if !$lex_keyword_rules{$name}
	push @lex_keywords, $name
	$lex_keyword_rules{$name}=$(k)

subcode: init_KeyName
    my %KeyName=(
	'(' => "Lp",
	')' => "Rp",
	'>' => "Gt",
	'<' => "Lt",
	'=' => "Eq",
	'*' => "Star",
	'/' => "Slash",
	'+' => "Plus",
	'-' => "Minus",
	'!' => "Not",
	'^' => "Ctrl",
	'@' => "At",
	'#' => "Pound",
	'$' => "Dollar",
	'%' => "Percent",
	'&' => "And",
	'[' => "Lb",
	']' => "Rb",
	'{' => "Lc", 
	'}' => "Rc",
	':' => "Colon",
	';' => "Semicolon",
	'`' => "Lq",
	"'" => "Rq",
	'"' => "Dq",
	',' => "Comma",
	'.' => "Dot",
	'?' => "Qm",
	'|' => "Or",
	'~' => "Tilde",
	'\\'=> "Backslash",
	)

