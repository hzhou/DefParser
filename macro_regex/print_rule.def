subcode: _autoload
    $sub filter_rule($name, $rule)
	my $type=$rule->{type}
	$if $type eq "nonterm"
	    push @topdown_list, $rule->{value}
	$elif $type eq "RECURSE"
	    die "error RECURSE\n"
	$elif $type eq "right"
	    $rule->{recurse}=$name
	$elif $type =~ /group|alt/
	    my $tlist=$rule->{value}
	    $foreach $t in @$tlist
		$if $t->{type} eq "RECURSE"
		    $t->{type}="nonterm"
		    $t->{value}=$name
		$else
		    filter_rule($name, $t)
	$elif $type =~ /[*?+]/
	    filter_rule($name, $rule->{value})

    $sub print_rule($rule)
	$if ref($rule) eq "SCALAR"
	    return $rule
	$elif ref($rule) eq "HASH"
	    my $type=$rule->{type}
	    $if $type =~ /^(term|nonterm|keyword)/
		$if $type eq "nonterm"
		    push @topdown_list, $rule->{value}
		$type=uc($type)
		return "[$type: $rule->{value}]"
	    $elif $type =~ /group|alt/
		my $tlist=$rule->{value}
		my @plist
		$foreach $t in @$tlist
		    push @plist, print_rule($t)
		$if $type eq "group"
		    return "(".join(' ', @plist).")"
		$else
		    return "(".join(' | ', @plist).")"
	    $elif $type =~ /[*?+]/
		my $t=print_rule($rule->{value})
		return "$t$type"
	    $else
		return "[$type]"
	$else
	    return "[$rule]"

# -------------------------------
subcode: print_grammar
    &call topdown_loop, name, $top_symbol
	my $rulelist=$rules{$name}
	print "$name:\n"
	$foreach $r in @$rulelist
	    print "    ", print_rule($r), "\n"
	print "\n"  

# -------------------------------
subcode: filter_grammar
    &call topdown_loop, name, $top_symbol
	my $rulelist=$rules{$name}
	$foreach $r in @$rulelist
	    filter_rule($name, $r)

