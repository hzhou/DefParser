# ---------------- REGEX VM -----------------------
subcode:: _autoload
    # VM is a list of [opcode,char,n_out1,n_out2]
    $sub build_vm($startstate)
	my @threadstack;
	push @threadstack, $startstate;

	my @vm;
	my %address;
	$while my $state=pop @threadstack
	    $if defined $address{$state}
		next;
	    $while 1
		$if defined $address{$state}
		    push @vm, ["Jmp", 0, $state, 0];
		    last;
		$else
		    my $label=$state->{label}
		    $address{$state}=$#vm+1;
		    $call state_to_vm
		    $if $label
			$vm[-1]->[4]=$label
		    $if @vm>1000
			die "VM too long\n"
		    $if $flag_last
			last
	# -- patch labels
	$foreach my $l  in @vm
	    $if $l->[0] eq "Jmp"
		$l->[2]=$address{$l->[2]};
	    $elsif $l->[0] eq "Split"
		$l->[2]=$address{$l->[2]};
		$l->[3]=$address{$l->[3]};
	return \@vm;

subcode: state_to_vm
    my $flag_last
    $if $state->{c} =~/Match-(.*)/
	push @vm,  ["Match", $1, 0, 0];
	$flag_last=1
    $elsif $state->{c} eq "Split"
	$if $state->{nongreedy}
	    push @vm, ["Split", 1, $state->{out2}, $state->{out1}];
	$else
	    push @vm, ["Split", 0, $state->{out1}, $state->{out2}];
	push @threadstack, $state->{out1};
	push @threadstack, $state->{out2};
	$flag_last=1
    $elsif $state->{c} eq "AnyChar"
	push @vm,  ["AnyChar", 0, 0, 0];
	$state=$state->{out1};
    $elsif $state->{c} =~/^Range-(.+)-(.+)/
	push @vm,  ["Range", 0, $1, $2];
	$state=$state->{out1};
    $elsif $state->{c} =~/^NotChar-(.+)/
	push @vm,  ["NotChar", $1, 0, 0];
	$state=$state->{out1};
    $elsif $state->{c} =~/^LtChar-(.+)/
	push @vm,  ["LtChar", $1, 0, 0];
	$state=$state->{out1};
    $elsif $state->{c} =~/^GtChar-(.+)/
	push @vm,  ["GtChar", $1, 0, 0];
	$state=$state->{out1};
    $elsif $state->{c} =~/Class-(.)/
	push @vm,  ["Class", $1, 0, 0];
	$state=$state->{out1};
    $else
	my $c=$state->{c}
	push @vm,  ["Char", $c, 0, 0];
	$state=$state->{out1};

# --------
subcode: print_vm_c(var)
    $call vm_hash_labels, $vm
    my $n=@$vm;
    $call do_print, "\$define($(var)_SIZE) $n"
    $call do_print, "struct VMInst $(var)[$n]= {"
    my $addr=0
    $foreach $l in @$vm
	$if $l->[0] =~/^(Char|NotChar|LtChar|GtChar|Class)/
	    $l->[1]=literal_char($l->[1])
	$elif $l->[0] eq "Range"
	    $l->[2]=literal_char($l->[2])
	    $l->[3]=literal_char($l->[3])
	my $label
	$if $labelhash{$addr}
	    $label=$addr
	$if $l->[4]
	    $label.=" - ".pop(@$l)
	$if $label
	    $label="#"." ".$label
	    $call do_print, "    $label"
	my $t=join(", ", @$l)
	$call do_print, "    $t,"
	$addr++
    $call do_print, "};"

subcode: vm_hash_labels(vm)
    my %labelhash
    $foreach $l in @$(vm)
	$if $l->[0] eq "Jmp"
	    $labelhash{$l->[2]}=1
	$elif $l->[0] eq "Split"
	    $labelhash{$l->[2]}=1
	    $labelhash{$l->[3]}=1

