include: macro_regex/build_lex.def
include: macro_regex/parse_rule.def
include: macro_regex/print_rule.def
include: macro_regex/write_rule.def
include: macro_regex/load_grammar.def

page: make_parser
    type: pl
    subcode: main
	my ($grammarfile, $outdir)=@ARGV
	$if !-f $grammarfile or !-d $outdir
	    die "Usage: $0 grammar_file output_dir\n"

	$call load_grammar, $grammarfile
	$call generate_lex
	$call filter_grammar
	$call print_grammar
	&call open_w, $outdir/lex.def
	    my $indent=0
	    $call do_print, "subcode:: _autoload"
	    $indent++
	    $call print_lex_defs
	    $call print_vm_c, lex
	&call open_w, $outdir/parser.def
	    my $indent=0
	    $call do_print_ln
	    $call parse_grammar

	    $call do_print, "subcode:: _autoload"
	    $indent++
	    $call print_rule_defs
	    $indent--
	    $call print_rule_name_sub
	    $call print_skip_tokens_sub
	$call @support_subs

# -------------------------------
subcode: do_print(@str)
    print Out "    "x$indent, $(str), "\n"

subcode: do_print_ln
    print Out "\n"

# --------------------------------
subcode: print_skip_tokens_sub
    $if @skip_list
	$call do_print, "subcode: skip_tokens"
	$indent++
	$foreach $t in @skip_list
	    $call do_print, "\$call skip_token, $t"
	$indent--
	$call do_print_ln
