%grammar prog

exp_atom: ID | Integer | Float | Character
    | strings
    | '(' exp ')'

# ----
exp_postfix: exp_atom ( array_reference | function_call | struct_reference | inc_dec )*

array_reference: '[' exp ']'

function_call: '(' arg_list ')'
arg: exp_single?
arg_list: arg ( ',' arg )*

struct_reference: ('.' | '->') ID
inc_dec: '++' | '--'

# ----
exp_unary: exp_postfix
    | ( '++' | '--' | '&' | '*' | '+' | '-' | '~' | '!' | typecast | 'sizeof' )+ exp_postfix
typecast: '(' spec+ decl? ')'

FIRST(typecast): LA1='(' && LA2=spec

# ----
exp_single: exp_unary
    | exp_mult: %left '*' | '/' | '%'
    | exp_plus: %left '+' | '-'
    | exp_shift: %left '<<' | '>>'
    | exp_rel: %left '<' | '>' | '<=' | '>='
    | exp_cmp: %left '==' | '!='
    | exp_bitand: %left '&'
    | exp_bitxor: %left '^'
    | exp_bitor: %left '|'
    | exp_and: %left '&&'
    | exp_or: %left '||'
    | exp_cond: %tripple '?', ':'
    | exp_assign: %right '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='
exp: exp_single (',' exp_single)*

# -------------------------------------------
SpecStorage: auto|register|static|extern
SpecType: void|char|short|int|long|float|double|signed|unsigned
SpecQualifier: const|volatile
# -------------------------------------------
spec: SpecStorage 
    | SpecType 
    | SpecQualifier 
    | structure 
    | enum

structure: ( 'struct' | 'union' ) ID? ( '{' struct_def_list '}' )?
struct_declarator: decl ( ':' exp )?
struct_def_unit: spec* struct_declarator ( ',' struct_declarator )*
struct_def_list: (struct_def_unit ';')*

enum: 'enum' ID? ( '{' enum_def_list '}' )?
enum_def_unit: ID ( '=' exp )?
enum_def_list: enum_def_unit (',' enum_def_unit)*

# -------------------------------------------
decl_atom: ID | '(' decl ')'
decl: decl_pointer* ( decl_atom decl_suffix* )?

decl_suffix: '[' exp? ']'
    | '(' param_list? ')'
decl_pointer: '*' SpecQualifier*

id_list: ID ( ',' ID )*

param: spec+ decl
param_var: ',' '...'
FIRST(param_var): LA1=',' && LA2='...'
param_list: param ( ',' param )* param_var?

# -------------------------------------------
init: exp_single
    | '{' init ( ',' init? )* '}'

# -------------------------------------------
declaration: 
    | 'typedef' declaration
    | spec+ decl_unit_list ';'
    | spec+ ID '(' param_list? ')' ';' 
    | spec+ ID '(' id_list ')' ( spec+ decl_list ';' )* stmt_compound
    | spec+ ID '(' param_list? ')' stmt_compound

default_function_definition:
    | ID '(' id_list ')' ( spec+ decl_list ';' )* stmt_compound
    | ID '(' param_list? ')' stmt_compound

stmt_compound: '{' (declaration | statement)* '}'


decl_unit: decl ( '=' init )?
decl_unit_list: decl_unit ( ',' decl_unit )*
decl_list: decl ( ',' decl)*


# -------------------------------------------
statement: label statement
    | 'case' exp ':' statement
    | 'default' ':' statement
    | stmt_exp: exp ';'
    | stmt_compound
    | 'if' '(' exp ')' statement ( 'else' statement )?
    | 'switch' '(' exp ')' statement
    | stmt_while: 'while' '(' exp ')' statement
    | 'do' statement 'while' '(' exp ')'
    | 'for' '(' exp? ';' exp? ';' exp? ')' statement
    | 'goto' ID ';'
    | 'continue' ';'
    | 'break' ';'
    | 'return' exp? ';'

label: ID ':'
FIRST(label): LA1=ID && LA2=':'
# -------------------------------------------
prog: (declaration | default_function_definition)*

# -- Lexer rules, order matters, especially for perl implementations ---------
$Exp: [eE][+-]?\d+
$F_Suffix: [fFlL]+
$F_Stem: (\d+\.\d*|\.\d+)

Float: ($F_Stem($Exp)?|\d+$Exp)($F_Suffix)?

$Oct: 0[0-7]+
$Hex: 0[xX][0-9a-fA-F]+
$Dec: \d+
$I_Suffix: [uUlL]+

Integer: ($Oct|$Hex|$Dec)($I_Suffix)?

Character: L?'([^']|\\')+'
String: L?"([^"]|\\")*"

strings: String+

ID: [_a-zA-Z]\w*
%lex_action ID

%skip SKIP COMMENT_1 COMMENT_2

SKIP: [ \t\r\n]
COMMENT_1: /\*.*?\*/
COMMENT_2: //.*?\n
